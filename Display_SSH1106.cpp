/*
 * Autor: Sofiane Arouay
 * Date: 10.11.2019
 * Class DISPLAY_SSH1106 is an interface for the Display SSH1106
 * With this class user can send the defined messages to be displayed 
 *  
 */

#include "Display_SSH1106.h"


static unsigned char hska_logo_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xf0, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x1f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xfc, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff,
  0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x03, 0x00, 0x00,
  0x00, 0x00, 0xfe, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
  0xff, 0x07, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00,
  0x00, 0x80, 0xff, 0xff, 0xff, 0x0d, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff,
  0xff, 0x09, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x11, 0x00, 0x00,
  0x00, 0xe0, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff,
  0xff, 0x29, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x09, 0x00, 0x00,
  0x00, 0xf8, 0xff, 0xff, 0xff, 0x49, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff,
  0xff, 0x91, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x91, 0x00, 0x00,
  0x00, 0xfe, 0xff, 0xff, 0xff, 0x11, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff,
  0xff, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x00,
  0x80, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x00, 0x80, 0xff, 0xff, 0xff,
  0xff, 0x21, 0x04, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x21, 0x00, 0x00,
  0xc0, 0xff, 0xff, 0xff, 0xff, 0x41, 0x08, 0x00, 0xe0, 0xff, 0xff, 0xff,
  0xff, 0x41, 0x08, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x41, 0x10, 0x00,
  0xf0, 0xff, 0xff, 0xff, 0xff, 0x81, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff,
  0xff, 0x81, 0x20, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x81, 0x00, 0x00,
  0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x40, 0x00, 0xfe, 0xff, 0xff, 0xff,
  0xff, 0x01, 0x20, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x01, 0x11, 0x00,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x81, 0x00, 0x00,
  0x00, 0x08, 0x40, 0x00, 0x0c, 0x20, 0x00, 0x00, 0x00, 0x08, 0x40, 0x80,
  0x01, 0x08, 0x00, 0x00, 0x00, 0x04, 0x40, 0x0c, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x04, 0xc0, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x18, 0x20, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x20, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x10,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


static unsigned char Arrow_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0xf0,
  0xff, 0x0f, 0x00, 0x00, 0xfc, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xc3, 0xff,
  0x00, 0x80, 0x3f, 0x00, 0xfc, 0x01, 0xc0, 0x0f, 0x00, 0xf0, 0x03, 0xe0,
  0x03, 0x00, 0xc0, 0x07, 0xf0, 0x01, 0x00, 0x80, 0x0f, 0xf0, 0x00, 0x00,
  0x00, 0x0f, 0x78, 0x00, 0x10, 0x00, 0x1e, 0x78, 0x00, 0x3c, 0x00, 0x1e,
  0x3c, 0x00, 0x3e, 0x00, 0x3c, 0x3c, 0x00, 0x7e, 0x00, 0x3c, 0x1e, 0x80,
  0xff, 0x01, 0x78, 0x1e, 0x80, 0xff, 0x03, 0x78, 0x1e, 0xc0, 0xff, 0x03,
  0x78, 0x0e, 0xf0, 0xff, 0x0f, 0x78, 0x0e, 0xf0, 0xff, 0x0f, 0x70, 0x0e,
  0xf8, 0xff, 0x1f, 0x70, 0x0e, 0x00, 0x3c, 0x00, 0x70, 0x0e, 0x00, 0x3c,
  0x00, 0x70, 0x1e, 0x00, 0x3e, 0x00, 0x78, 0x1e, 0x00, 0x3c, 0x00, 0x78,
  0x1e, 0x00, 0x7c, 0x00, 0x78, 0x1e, 0x00, 0x3c, 0x00, 0x78, 0x3c, 0x00,
  0x3e, 0x00, 0x3c, 0x3c, 0x00, 0x3c, 0x00, 0x3c, 0x78, 0x00, 0x7c, 0x00,
  0x1e, 0x78, 0x00, 0x3c, 0x00, 0x1e, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xf0,
  0x01, 0x00, 0x80, 0x0f, 0xe0, 0x03, 0x00, 0xc0, 0x07, 0xc0, 0x0f, 0x00,
  0xf0, 0x03, 0x80, 0x3f, 0x00, 0xfc, 0x01, 0x00, 0xff, 0xc3, 0xff, 0x00,
  0x00, 0xfc, 0xff, 0x3f, 0x00, 0x00, 0xf0, 0xff, 0x0f, 0x00, 0x00, 0xc0,
  0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


static unsigned char Wrong_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x5f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0xc0, 0xff,
  0xff, 0x0f, 0x00, 0x00, 0x00, 0xf0, 0xbf, 0xf4, 0x1f, 0x00, 0x00, 0x00,
  0xf8, 0x03, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00,
  0x00, 0x00, 0x3f, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x80, 0x1f, 0x00, 0x00,
  0xe0, 0x03, 0x00, 0x80, 0x07, 0x00, 0x00, 0xc0, 0x07, 0x00, 0xc0, 0x03,
  0x00, 0x00, 0x00, 0x0f, 0x00, 0xe0, 0x03, 0x00, 0x00, 0x00, 0x1f, 0x00,
  0xe0, 0x01, 0x00, 0x00, 0x00, 0x1e, 0x00, 0xf0, 0x80, 0x03, 0x00, 0x07,
  0x3c, 0x00, 0x78, 0xc0, 0x07, 0x80, 0x0f, 0x3c, 0x00, 0x78, 0xe0, 0x0f,
  0xc0, 0x0f, 0x78, 0x00, 0x38, 0xc0, 0x1f, 0xe0, 0x0f, 0x78, 0x00, 0x3c,
  0x80, 0x3f, 0xf0, 0x07, 0xf0, 0x00, 0x3c, 0x00, 0x7f, 0xf8, 0x03, 0xf0,
  0x00, 0x1c, 0x00, 0xfe, 0xfc, 0x01, 0xf0, 0x00, 0x1c, 0x00, 0xfc, 0xff,
  0x00, 0xe0, 0x00, 0x1c, 0x00, 0xf8, 0x7f, 0x00, 0xe0, 0x00, 0x1e, 0x00,
  0xf0, 0x3f, 0x00, 0xe0, 0x00, 0x1e, 0x00, 0xe0, 0x1f, 0x00, 0xe0, 0x01,
  0x1c, 0x00, 0xe0, 0x1f, 0x00, 0xe0, 0x00, 0x1e, 0x00, 0xf0, 0x3f, 0x00,
  0xe0, 0x00, 0x1c, 0x00, 0xf8, 0x7f, 0x00, 0xe0, 0x00, 0x1c, 0x00, 0xfc,
  0xff, 0x00, 0xe0, 0x00, 0x1c, 0x00, 0xfe, 0xfc, 0x01, 0xf0, 0x00, 0x3c,
  0x00, 0x7f, 0xf8, 0x03, 0xf0, 0x00, 0x3c, 0x80, 0x3f, 0xf0, 0x07, 0xf0,
  0x00, 0x38, 0xc0, 0x1f, 0xe0, 0x0f, 0x78, 0x00, 0x78, 0xe0, 0x0f, 0xc0,
  0x0f, 0x78, 0x00, 0x70, 0xc0, 0x07, 0x80, 0x0f, 0x38, 0x00, 0xf0, 0x80,
  0x01, 0x00, 0x07, 0x3c, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x02, 0x1e, 0x00,
  0xe0, 0x01, 0x00, 0x00, 0x00, 0x1f, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x80, 0x07, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x80, 0x1f, 0x00,
  0x00, 0xe0, 0x03, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00,
  0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xf8, 0x03, 0x00, 0x7f, 0x00,
  0x00, 0x00, 0xf0, 0xbf, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00,
  0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


static unsigned char Cocktail_bits[] = {
  0x7f, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
  0x00, 0x00, 0x00, 0x08, 0x00, 0x80, 0x0f, 0x00, 0x10, 0x00, 0xc0, 0x30,
  0x00, 0x10, 0x00, 0x20, 0x60, 0x00, 0x20, 0x00, 0x30, 0x40, 0x00, 0x20,
  0x00, 0x10, 0x80, 0x00, 0x40, 0x00, 0x10, 0x80, 0x80, 0xdb, 0xed, 0xb6,
  0x83, 0x00, 0x41, 0x00, 0x00, 0x81, 0x00, 0x82, 0x00, 0x80, 0xc0, 0x00,
  0xf2, 0xff, 0x9f, 0x40, 0x00, 0xf4, 0xff, 0x5f, 0x30, 0x00, 0xe8, 0xff,
  0xaf, 0x1f, 0x00, 0xd0, 0xff, 0x2f, 0x00, 0x00, 0xd0, 0xff, 0x17, 0x00,
  0x00, 0xa0, 0xff, 0x0b, 0x00, 0x00, 0x40, 0xff, 0x05, 0x00, 0x00, 0x00,
  0xff, 0x05, 0x00, 0x00, 0x80, 0xfe, 0x02, 0x00, 0x00, 0x00, 0xfd, 0x00,
  0x00, 0x00, 0x00, 0x7c, 0x01, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00,
  0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x10,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0xe0, 0x51, 0x0f, 0x00 };
  
  
  DISPLAY_SSH1106::DISPLAY_SSH1106(): altStatus(0xFF)
  {
	  Display_SSH1106= new U8G2_SH1106_128X64_NONAME_F_HW_I2C(U8G2_R2,/*reset=*/ U8X8_PIN_NONE, 22, 21);
  }
  
  DISPLAY_SSH1106::~DISPLAY_SSH1106()
  {
	  delete Display_SSH1106;
  }
  
  // Setup for the display need to be called in the start
  bool DISPLAY_SSH1106::displaybegin()
  {
	  Display_SSH1106->begin();
	  return true;
  }
  
  // display error message 
  bool DISPLAY_SSH1106::Message_fehler()
  {
	  
      Display_SSH1106->clear();
      Display_SSH1106->firstPage();
      Display_SSH1106->setFont(u8g2_font_questgiver_tr);
      Display_SSH1106->drawXBM(3, 7, Cocktail_width, Cocktail_height, Cocktail_bits);
      Display_SSH1106->drawStr(53, 37, "Fehler");
      Display_SSH1106->drawStr(53, 52, "Aufgetreten!");
      Display_SSH1106->nextPage();

      return true;
  }
  
  // display success message
  bool DISPLAY_SSH1106::Message_success()
  {
	  Display_SSH1106->clear();
      Display_SSH1106->firstPage();  
      Display_SSH1106->drawXBM(3, 7, Cocktail_width, Cocktail_height, Cocktail_bits);
      Display_SSH1106->setFont(u8g2_font_questgiver_tr);
      Display_SSH1106->drawStr(53, 37, "Geniessen Sie");
      Display_SSH1106->drawStr(53, 52, "den Cocktail!");
      Display_SSH1106->nextPage();

      return true;
  }
  
  // display this message when an order has been made in the website: Bitte Glas platzieren
  bool DISPLAY_SSH1106::OrderInfo()
  {
	  Display_SSH1106->clear();
      Display_SSH1106->firstPage();
      Display_SSH1106->drawXBM(0, 0, Arrow_width, Arrow_height, Arrow_bits);
      Display_SSH1106->setFont(u8g2_font_questgiver_tr);
      Display_SSH1106->drawStr(10, 60, "Bitte Glas platzieren!");
      Display_SSH1106->nextPage();

      return true;
  }
  
  // welcome message displayed when the Bestellstation is at rest
  bool DISPLAY_SSH1106::Message_welcome()
  {
	  Display_SSH1106->clear();
      Display_SSH1106->firstPage(); 
      Display_SSH1106->drawXBM(0, 0, hska_logo_width, hska_logo_height, hska_logo_bits);
      Display_SSH1106->setFont(u8g2_font_questgiver_tr);
      Display_SSH1106->drawStr(65, 15, "Willkommen");
      Display_SSH1106->drawStr(65, 30, "  an der");
      Display_SSH1106->drawStr(65, 45, "Hochschule");
      Display_SSH1106->drawStr(65, 60, " Karlsruhe!");
      Display_SSH1106->nextPage();

      return true;
  }
	
  // display that the Bestellstation is still trying to connect to the router	
  bool DISPLAY_SSH1106::RouterInfo()
  {
	  Display_SSH1106->clear();
      Display_SSH1106->firstPage(); 
	  Display_SSH1106->setFont(u8g2_font_questgiver_tr);
      Display_SSH1106->drawStr(15, 15, "  Verbindung  ");
      Display_SSH1106->drawStr(15, 30, "  zum Router  ");
      Display_SSH1106->drawStr(15, 45, "     wird     ");
      Display_SSH1106->drawStr(15, 60, "hergestellt...");
	  Display_SSH1106->nextPage();

      return true;
  }
  
  bool DISPLAY_SSH1106::Message_IPAdress(IPAddress IP)
  {
	  for(int i=0; i<4;i++)
	  {
		  
	  }
	  return true;
  }
  
  // display the right message given the status. With this function no need to try and 
  bool DISPLAY_SSH1106::displaycurrentStat(uint8_t Status)
  {
	  if(Status == altStatus)
   {
		  return true;
   }
	  altStatus = Status;
	  
	  switch (Status)
	  {
		  case ROUTERINFO:
      {
		  RouterInfo();
		  break;
      }
		  case WELCOME:
     {
		  Message_welcome();
		  break;
     }
		  case MSUCCESS:
		  {
		  Message_success();
		  break;
		  }
		  case MFEHLER:
     {
		  Message_fehler();
		  break;
     }
		  case ORDERINFO:
     {
		  OrderInfo();
		  break;
     }
		  default:
      {
		  altStatus = WELCOME;
		  Message_welcome();
		  break;
      }
	  }
	  
	  return true;
  }
	  
		  
